#ФУНКЦИОНАЛЬНОЕ ПРОГРАММИРОВАНИЕ JavaScript
## Область видимости переменных
- глобальная
- локальная
let
const
var 
function f(){
 use strict
}
## Функции
- простая функция
 function log(a, b){
	 let c = a+b;
	 return c;
 } 
- функция первого класса
var log = function(msg){
	...
}
- стрелочная функция
const strel = (a, b) => ({
	foo:bar
})
- функция объекта
const obj = {
	message:"test"
	log:function(){
		
	}
}
- функция массива
const arr = [
 "test test",
 message => console.log('asdf')
]
- функция как аргумент другой функции
const iner = logger => logger("test");
iner(message=>console.log(message));
$('selector').click(function(){
	
});
- функция как результат другой функции
var createStreem = function(logger){
 return function(message){
  logger(message.toUpperCase()+'!');
 }
}
const streem = createStreem(message=>console.log(message));
streem('hello');

## Способы вызова функций
- Вызов функции как функции
 myfunc('test');
- Вызов функции как метода
var calculator = {
 x:1,
 y:2,
 add:function(){
   this.resultat = this.x + this.y;
 }
}
console.log(calculator.add());
- Вызов функции как конструктора
var o = new Function()
var o = new Function

function User(name, pass){
	this.name = name,
	this.pass = pass
}
var u = new User("Vasya", 123);
u.name
u.pass
- Косвенный вызов функций с помощью методов call и apply
var Animal1 = {name:'cat'};
var Animal2 = {name:'dog'};

function sayName(){
	alert(this.name)
}
sayName.call(Animal1);
sayName.call(Animal2);

- Самовызывающиеся функции
(function(){
	//telo
}());

$(function(){
	$.
});

## Императивное и декларативное функциональное программирование
var str = "String to url";
- императивный или алгоритмический подход
var url = "";
for(var i=0; i<str.length; i++){
	if(str[i] == " "){
		url += "_";
	}else{
		url += str[i];
	}
}
- декларативный подход
 const url = str.replace(/ /g, "_");

## Функциональные концепции
- неизменяемость
// Объект
let color_lawn = {
	title:"lawn",
	color:"#00ff00",
	rating:0
}
// не правильный подход объект
function rateColor(color, rating){
	color.rating = rating;
	return rating;
}
var rat = rateColor2(color_lawn, 5);
// правильный подход объект Object.assign
var rateColor = function(color_obj, rating){
	return Object.assign({},color_obj, {rating:rating})
}
var rat = rateColor(color_lawn, 5);
// Массив
let list = [
{title:'red'},
{title:'gren'},
{title:'blue'},
]
// не правильный подход массив
var addColor = function(title, colors){
	colors.push({title:title})
}
addColor("pink", list);
addColor("yellow", list);
// правильный подход concat
const addColor = (title, colors) => colors.concat({title})
// правильный подход ...
const addColor = (title, colors) => [...colors, {title}];

- чистота
var Ivan = {
	name: "Ivan",
	canRead: false,
	canWrite: false
}
// не правильный подход
function selfEducate(){
	Ivan.canRead = true;
	Ivan.canWrite = true;
	return Ivan;
}
const selfEducate2 = (person) => {
	person.canRead = true;
	person.canWrite = true;
	return person;
}
// правильный подход
const selfEducate = person => ({
	...person,
	canRead: true,
	canWrite: true
});
var newIvan = selfEducate(Ivan);







